<html >
<head>
<META http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>Answers: Java Programmer Certification Mock Exam</title>
<meta content="noindex" name="robots">
<style>
<!--
#question {font-size: 125%;}
pre  {font: Arial}
#strong1 {font-weight: bold}
#bold {font-weight: bold}
#codeFragment {font-family: "Courier"}
#keyWord {font-family: "Courier"}
#identifier {font-family: "Courier"}
#type {font-family: "Courier"}
#literal {font-family: "Courier"}
#reservedWord {font-family: "Courier"}
#keyTerm {font-style: italic}
#codeFragmentBlock {font-family: "Courier"}
#commandLine {font-family: "Courier"}
#codeBlock {font-family: "Courier"}
#statement {font-family: "Courier"}
#expression {font-family: "Courier"}
#superScript {font-size: 65%}
#subScript {font-size: 65%}
#output {font-family: "Courier"}
-->
</style>
</head>
<body>
<h1 align="center">
<br>

</h1>
<p>
<h2 align="center">

</h2>
</p>
<div align="center">

</p>

<p>

</p>

</div>
<table border="1" width="100%">
<caption>Answers: Java Programmer Certification Mock Exam</caption>
<thead>
<tr>
<th>No.</th><th colspan="2">Answer</th><th>Remark</th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">1</td><td align="center">c&nbsp;
</td><td><span id="answertext">Prints: XXYY&nbsp;
</span></td><td><span id="remark">
The program will not print 
<span id="output">XXYY</span>.
Please note that the question asks which could 
<span id="bold">NOT</span>
be a result of attempting to
compile and run the program.
The finalize method of each instance can only run once;
so X or Y can never be printed more than once.
The instances referenced by 
<span id="identifier">x1</span>
and 
<span id="identifier">y1</span>
become
eligible for garbage collection
when method 
<span id="identifier">m</span>
returns; so both could be finalized at
that time, but there is no guarantee that they will
be.  Even though 
<textBook:name>System.gc</textBook:name>
is invoked in the 
<span id="identifier">main</span>
method,
there is no guarantee that the garbage collector will run at
that time.  If the garbage collector does run before the
program terminates, then the name of each object could
be printed at most one time.  The order in which the names 
are printed depends on the order in which the objects
are finalized. If the garbage collector does not run,
then nothing will be printed. 
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">2</td><td align="center">e&nbsp;
</td><td><span id="answertext">Indeterminate.&nbsp;
</span></td><td><span id="remark">
Since we don't know what method 
<span id="identifier">m2</span>
might be doing, we can not know if the objects are
eligible for garbage collection.
Suppose that method 
m2
is declared inside of a class that also contains
10 instance variables (instance variables are non-static
member fields) that are references to instances of class A.
The argument that appears in the method invocation expression
m2(q1)
is a reference to an instance of class
Q.
Suppose that
m2
saves each argument value in one of the ten instance variables
or in an element of an array of type
Q[].
When the loop in method
m1
runs to completion, each instance of class
Q 
would still be referenced by a one of the ten instance variables.
Since the instance variables would continue to 
reference each instance of class Q when line 3 is executed, none of the
instances would be eligible for garbage collection at that point.
A second possibility is that method
m2
does not save the reference values.  In that case, all of the
instances that were created inside the loop would be
eligible for garbage collection when line 3 is executed.

&nbsp;
</span></td>
</tr>
<tr>
<td align="center">3</td><td align="center">c&nbsp;
</td><td><span id="answertext">9&nbsp;
</span></td><td><span id="remark">
With each pass through the loop, 
<span id="identifier">q1</span>
references a
new object, and the old object becomes
eligible for garbage collection.
When the processing of line 2 begins, the last object
referenced by 
<span id="identifier">q1</span>
is not eligible for garbage collection.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">4</td><td align="center">g&nbsp;
</td><td><span id="answertext">None of the above&nbsp;
</span></td><td><span id="remark">
Please note that this question asks which object is 
<span id="bold">NOT</span>
eligible for garbage collection after method 
<span id="identifier">m1</span>
returns.
The objects referenced by 
<span id="identifier">i1</span>,
<span id="identifier">i2</span> 
and 
<span id="identifier">i3</span> 
form a ring such that each object is 
referenced by another.  
Even so, nothing outside of method 
<textBook:name>J.m1</textBook:name>
references any of those objects.  When method 
<textBook:name>J.m1</textBook:name>
returns, the ring becomes an island of
isolated objects that are not reachable by any
part of the user program. A key point to remember is that
an object that is referenced by another object
can be eligible for garbage collection if the
two objects form an island of isolated objects.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">5</td><td align="center">c&nbsp;
</td><td><span id="answertext">C&nbsp;
</span></td><td><span id="remark">
Please note that this question asks which objects are
<span id="bold">NOT</span>
eligible for garbage collection when method 
<span id="identifier">m2</span>
begins to execute? 
All three references, 
<span id="identifier">i1</span>,
<span id="identifier">i2</span> 
and 
<span id="identifier">i3</span>, 
refer to object named C; so C
is not eligible for garbage collection when method
<span id="identifier">m2</span>
begins to execute.
The objects named A and B have references to each other, but
no other objects refer to A and B. The objects A and
B form an island of islolated objects 
and are eligible for garbage collection. 
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">6</td><td align="center">a&nbsp;
</td><td><span id="answertext">1&nbsp;
</span></td><td><span id="remark">
Please note that this question asks which objects are
<span id="bold">NOT</span>
eligible for garbage collection after method
<span id="identifier">m1</span>
returns.
After method 
<span id="identifier">m1</span>
returns, the array
<span id="identifier">a1</span>
created on line 1 
is not eligible for garbage collection.
Method 
<span id="identifier">m1</span>
sets all elements of the array to 
<span id="literal">null</span>;
so the objects created on lines
2, 3 and 4 are eligible for
garbage collection when method 
<span id="identifier">m1</span>
returns.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">7</td><td align="center">g&nbsp;
</td><td><span id="answertext">None of the above&nbsp;
</span></td><td><span id="remark">
After method 
<span id="identifier">m1</span>
returns, none of the objects are
eligible for garbage collection.

Method 
<span id="identifier">m1</span>
sets the parameter variable 
<span id="identifier">a1</span>
to 
<span id="literal">null</span>, 
but that does
not change the reference 
<span id="identifier">a1</span>
in the 
<textBook:name>J.main</textBook:name>
method.  Since array 
<span id="identifier">a1</span>
continues to reference
all three objects,  none of the three are eligible for
garbage collection.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">8</td><td align="center">a&nbsp;
c&nbsp;
d&nbsp;
e&nbsp;
</td><td><span id="answertext">A1A2A3A1&nbsp;
</span><span id="answertext">A1A2A3A1A2A3&nbsp;
</span><span id="answertext">A1A2A3A1A1A2A3&nbsp;
</span><span id="answertext">A1A2A3A1A3A2A1&nbsp;
</span></td><td><span id="remark">
The three instances of class 
<span id="type">A</span>
form an isolated ring where each instance references
the next instance and the third references the first instance.
Four iterations of the
<span id="keyWord">for</span>
loop are processed.  Inside the body of the
<span id="keyWord">for</span>
statement, the invocation of the 
<span id="identifier">print</span>
method contains the argument expression
<span id="expression">a0 = a0.other()</span>.
On the first iteration, the reference variable
<span id="identifier">a0</span>
references the instance named
<span id="type">A3</span>. 
The value returned by the method named
<span id="identifier">other</span>
is a reference to the instance named
<span id="type">A1</span>.
The reference is assigned to the reference variable
<span id="identifier">a0</span>
and is also the value produced by the expression
<span id="expression">a0 = a0.other()</span>.
That reference value is passed as an argument to the
<span id="identifier">print</span>
method, and the
<span id="identifier">print</span> 
method invokes the 
<textBook:name>A.toString</textBook:name>
method.  With each iteration of the loop, the reference
moves to the next object in the loop and the name of the
object is printed.  After four iterations, the loop ends and
the method
<span id="identifier">m1</span>
returns.
The invocation of the 
<textBook:name>System.gc</textBook:name> 
method serves as a suggestion that the garbage collector should 
be allowed to run.  The system could ignore the suggestion, so
there is no guarantee that the eligible arguments will be 
garbage collected.  If they are collected, there is no
guarantee which will be collected first.  The only
guarantee is that the finalize method will be invoked
on each particular instance before
the resources that had been allocated to that
instance are reclaimed.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">9</td><td align="center">c&nbsp;
d&nbsp;
</td><td><span id="answertext">, Ba, B1&nbsp;
</span><span id="answertext">B2, Ba, B1&nbsp;
</span></td><td><span id="remark">
Class
<span id="type">H</span>
declares two static member variables named 
<span id="identifier">ba</span> 
and
<span id="identifier">i</span>.
The type of 
<span id="identifier">i</span>
is
<span id="type">int</span>,
and the value is initialized to 
<span id="literal">1</span>.
The type of
<span id="identifier">ba</span> 
is
<span id="type">B</span>.
The declaration of 
<span id="identifier">ba</span>
contains the class instance creation expression
<span id="expression">new B("Ba")</span>.
The constructor of class
<span id="type">B</span>
assigns the argument value to the instance variable called
<span id="identifier">name</span>.
Inside the 
<span id="identifier">main</span>
method of class 
<span id="type">H</span>,
the method invocation expression
<span id="expression">m1(ba)</span>
invokes method
<span id="identifier">m1</span>.
The argument is the static member variable 
<span id="identifier">ba</span>.
The body of method 
<span id="identifier">m1</span>
contains a
<span id="keyWord">return</span>
statement with the expression
<span id="expression">b = new B("B" + i++)</span>.
The assignment expression contains the class instance creation expression
<span id="expression">new B("B" + i++)</span>
which creates a new instance of the class
<span id="type">B</span>.
For this first invocation of method 
<span id="identifier">m1</span>,
the argument appearing in the class instance creation expression is
the 
<span id="type">String</span>
value 
<span id="literal">B1</span>.
The reference to the new 
<span id="type">String</span> 
is assigned to the parameter variable
<span id="identifier">b</span>,
but that assignment does not change the value of the member variable
<span id="identifier">ba</span>.
The value of the assignment expression is the reference to the new 
instance of class
<span id="type">B</span>
with the name
<span id="literal">B1</span>,
and that reference value is returned by the method
<span id="identifier">m1</span>.
The returned value is assigned to the local variable 
<span id="identifier">x</span>.
The next statement inside the
<span id="identifier">main</span> 
method is another invocation of method
<span id="identifier">m1</span>.
The argument appearing in the method invocation expression
<span id="expression">m1(x)</span>
is the local reference variable
<span id="identifier">x</span>.
The method invocation does not change the value of 
<span id="identifier">x</span>.
The value returned by this second invocation of
<span id="identifier">m1</span>
is a reference to a new instance of class 
<span id="type">B</span>
that has the name
<span id="literal">B2</span>.
The returned reference value is not assigned to a variable,
so the instance named
<span id="literal">B2</span>
is eligible for garbage collection.
There is no guarantee that the garbage collector will run
before the
<span id="identifier">print</span>
statement is invoked.   If it does run, then the instance named
<span id="literal">B2</span>
could be finalized causing the name to be printed.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">10</td><td align="center">e&nbsp;
</td><td><span id="answertext">Ba, B1, B2, Bb&nbsp;
</span></td><td><span id="remark">
Class
<span id="type">J</span>
declares two static member variables named 
<span id="identifier">bc</span> 
and
<span id="identifier">i</span>.
The type of 
<span id="identifier">i</span>
is
<span id="type">int</span>,
and the value is initialized to 
<span id="literal">1</span>.
The type of
<span id="identifier">bc</span> 
is
<span id="type">B</span>.

Inside the 
<span id="identifier">main</span>
method of class 
<span id="type">J</span>,
the method invocation expression
<span id="expression">m1(new B("Ba"))</span>
invokes method
<span id="identifier">m1</span>.
The argument is the class instance creation expression
<span id="expression">new B("Ba")</span>.

The constructor of class
<span id="type">B</span>
assigns the argument value to the instance variable called
<span id="identifier">name</span>,
so a new instance of class
<span id="type">B</span>
named
<span id="literal">Ba</span>
is created.

The reference to the new instance of class
<span id="type">B</span>
is the argument that is passed to method
<span id="identifier">m1</span>.

The body of method 
<span id="identifier">m1</span>
contains two statements.  The first contains the assignment expression
<span id="expression">bc = b</span>
that assigns the value of the method parameter
<span id="identifier">b</span>
to the static member variable
<span id="identifier">bc</span>,
so 
<span id="identifier">bc</span>
now references the instance of class 
<span id="type">B</span>
named
<span id="literal">Ba</span>.

The second statement in the body of 
<span id="identifier">m1</span>
is a
<span id="keyWord">return</span>
statement with the class instance creation expression
<span id="expression">new B("B" + i++)</span>.
For this first invocation of method 
<span id="identifier">m1</span>,
the argument appearing in the class instance creation expression is the 
<span id="type">String</span>
value 
<span id="literal">B1</span>.
The reference to the new 
<span id="type">String</span> 
is returned by method
<span id="identifier">m1</span>.
The returned value is assigned to the local variable 
<span id="identifier">x</span>.

Inside the
<span id="identifier">main</span> 
method, the declaration of the local variable
<span id="identifier">y</span>
contains another invocation of method
<span id="identifier">m1</span>.
The argument appearing in the method invocation expression
<span id="expression">m1(new B("Bb"))</span>
is the class instance creation expression
<span id="expression">new B("Bb")</span>,
so the argument value for the invocation of method
<span id="identifier">m1</span>
is a reference to a new instance of class
<span id="type">B</span>
named
<span id="literal">Bb</span>.
Inside the body of method 
<span id="identifier">m1</span>,
the reference to the new instance of class 
<span id="type">B</span>
named
<span id="literal">Bb</span>
is assigned to the static member variable
<span id="literal">Bc</span>.  
At that point, the instance of class 
<span id="type">B</span>
named 
<span id="literal">Ba</span>
becomes eligible for garbage collection.
Method
<span id="identifier">m1</span>
returns a reference to a new instance of class
<span id="type">B</span>
named 
<span id="literal">B2</span>.

There is no guarantee that the garbage collector will run
before the
<span id="identifier">print</span>
statement is invoked.  If it does run, then the instance named
<span id="literal">Ba</span>
could be finalized causing the name to be printed.
&nbsp;
</span></td>
</tr>
<tr>
<td align="center">11</td><td align="center">c&nbsp;
</td><td><span id="answertext">The program compiles, runs and prints X.&nbsp;
</span></td><td><span id="remark">
The parameter 
<span id="identifier">i</span>
of method 
<span id="identifier">m1</span>
is a copy of the local variable 
<span id="identifier">i</span>
of method 
<textBook:name>J.main</textBook:name>.
Setting the parameter variable 
<span id="identifier">i</span>
of method 
<span id="identifier">m1</span>
to 
<span id="literal">null</span>
does not change the local variable
<span id="identifier">i</span>
of method 
<textBook:name>J.main</textBook:name>.
&nbsp;
</span></td>
</tr>
</tbody>
</table>
<table width="100%" border="0" cellpadding="2" cellspacing="0">
<tbody align="left">
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td title="Get your questions answered here"><b>Ask a Question</b></td>
</tr>
<tr>
<td><a href="mailto:">Send an email to me.</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td title="Get your questions answered here"><b>Java Question and Answer Forums</b></td>
</tr>
<tr>
<td align="left"><a title="Get your questions answered here" target="_blank" href="http://saloon.javaranch.com/">JavaRanch Big Moose Saloon</a></td>
</tr>
<tr>
<td align="left"><a title="Get your questions answered here" target="_blank" href="http://www.jchq.net/discus/">Marcus Green's Discussion Forum</a></td>
</tr>
<tr>
<td align="left"><a title="Get your questions answered here" target="_blank" href="http://developer.java.sun.com/developer/community/">java.sun.com Forums, Chat and User Groups</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td title="Useful reference material."><b>Other Resources</b></td>
</tr>
<tr>
<td align="left"><a title="Look up the answer yourself here" target="_blank" href="http://java.sun.com/docs/books/jls/second_edition/html/j.title.doc.html">Java Language Specification</a></td>
</tr>
<tr>
<td align="left"><a title="Look up the answer yourself here" target="_blank" href="http://java.sun.com/docs/books/vmspec/2nd-edition/html/VMSpecTOC.doc.html">Java Virtual Machine Specification</a></td>
</tr>
<tr>
<td align="left"><a title="Look up JavaDocs here" target="_blank" href="http://java.sun.com/j2se/1.4/docs/api/">Java 2 Platform, Standard Edition, v 1.4.0 API Specification</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
<tr>
<td><b>Tutorials</b></td>
</tr>
<tr>
<td align="left"><a title="Sun's Java Language Tutorial" target="_blank" href="http://java.sun.com/docs/books/tutorial/java/index.html">Learning the Java Language</a></td>
</tr>
<tr>
<td align="left"><a title="Sun's Java Language Tutorial with an Operator Precedence Chart" target="_blank" href="http://java.sun.com/docs/books/tutorial/java/nutsandbolts/expressions.html">Operator Precedence Chart, Expressions, Statements, Blocks</a></td>
</tr>
<tr>
<td align="left"><a title="Assertions Tutorial" target="_blank" href="http://java.sun.com/j2se/1.4/docs/guide/lang/assert.html">Programming with Assertions</a></td>
</tr>
<tr>
<td>&nbsp;</td>
</tr>
</tbody>
</table>
<hr>
<center>
<font size="-1"><em>
    Copyright &copy; 2002-2004, <br>
    All rights reserved.
  </em></font>
</center>
</body>
</html>
<!-- text below generated by server. PLEASE REMOVE --><!-- Counter/Statistics data collection code --><script language="JavaScript" src="http://hostingprod.com/js_source/geov2.js"></script><script language="javascript">geovisit();</script><noscript><img src="http://visit.webhosting.yahoo.com/visit.gif?us1139304443" alt="setstats" border="0" width="1" height="1"></noscript>
<IMG SRC="http://geo.yahoo.com/serv?s=76001404&t=1139304443" ALT=1 WIDTH=1 HEIGHT=1>
